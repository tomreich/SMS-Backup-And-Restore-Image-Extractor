<# 
.SYNOPSIS
     Extracts images from backup files generated by the Android application "SMS Backup & Restore"
.DESCRIPTION
     Takes in an XML backup file (typically sms.xml) generated by the Android application
     "SMS Backup & Restore" available in the Google Play store and extracts all MMS content
     including images, videos, vcards, etc into a separate subdirectory for each phone number.
.NOTES
     Author: Tom Reich - tom@tomreich.com
     This script worked on or around June 2019.  The XML schema produced by "SMS Backup & Restore" 
     is subject to change.
.LINK
     https://www.tomreich.com
.EXAMPLE
    .\SMS-Backup-And-Restore-Image-Extractor.ps1 -smsXmlFile "sms.xml"
#>
param (
    # The xml SMS backup file generated by SMS Backup & Restore.
    [Parameter(Mandatory)]
    [string]$smsXmlFile,

    # The output directory where the extracted images are placed.
    [string]$outputDirectory = "."
)

$contentTypes = @{
    "image/jpeg" = "jpg";
    "image/gif" = "gif";
    "image/png" = "png";
    "video/mp4" = "mp4";
    "text/x-vcard" = "vcf";
    "video/3gpp" = "3gp";
    "video/mpeg" = "mpg";
}

foreach($line in [System.IO.File]::ReadLines($smsXmlFile))
{
    if ($line -match "<mms date=`"([0-9]+)`".*?address=`"(\S+)`"")
    {
        $recipient = $Matches[2]
        $time = $Matches[1]
    }
    elseif ($line -match "</mms>")
    {
        $recipient = ""
        $time = ""
    }
    elseif ($line -match "<part seq=`"0`" ct=`"(\S+)`".*?data=`"(\S+)`"")
    {
        $ct = $Matches[1]

        if (-not ($contentTypes.ContainsKey($ct)))
        {
            Write-Output "Encountered unknown content type [$ct]!  Skipping..."
            continue
        }
        $fileExt = $contentTypes[$ct]

        $timeReadable = (([System.DateTimeOffset]::FromUnixTimeSeconds($time.Substring(0,10))).DateTime).ToString("yyyyMMdd-HHmmss")

        Write-Output "Saving file with content type [$ct] from $recipient at $timeReadable"

        $recipientClean = $recipient -replace "[^0-9]", "-"
        $folder = "$outputDirectory\$recipientClean"
        if (-not (Test-Path $folder)) { New-Item -Path $folder -ItemType Directory | Out-Null }
        $Base64String=$Matches[2]
        $Image = "$folder\$timeReadable.$fileExt"
        [byte[]]$Bytes = [convert]::FromBase64String($Base64String)
        [System.IO.File]::WriteAllBytes($Image,$Bytes)
    }
}
